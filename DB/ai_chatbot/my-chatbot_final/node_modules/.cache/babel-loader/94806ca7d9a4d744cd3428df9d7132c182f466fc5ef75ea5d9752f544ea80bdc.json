{"ast":null,"code":"var _jsxFileName = \"/Users/ichan-yeong/my-chatbot/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  // 사용자 입력을 저장할 상태 변수\n  const [userInput, setUserInput] = useState('');\n\n  // 메시지 리스트를 저장할 상태 변수\n  const [messages, setMessages] = useState([]);\n\n  // 메시지를 전송하는 함수\n  const handleSendMessage = async () => {\n    // 사용자 메시지를 메시지 리스트에 추가\n    setMessages([...messages, {\n      text: userInput,\n      sender: 'user'\n    }]);\n\n    // 서버에 사용자 메시지를 전송\n    const response = await fetch('/send_message', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: userInput\n      }) // JSON 형태로 사용자 입력을 전송\n    });\n\n    // 서버로부터 응답받기\n    const data = await response.json();\n\n    // 로봇의 응답 메시지를 메시지 리스트에 추가\n    setMessages(prevMessages => [...prevMessages, {\n      text: data.response,\n      sender: 'assistant'\n    }]);\n\n    // 입력창 초기화\n    setUserInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC5C4\\uB9C8\\uD615 \\uB85C\\uBD07\\uACFC\\uC758 \\uCC44\\uD305\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid #ccc',\n        padding: '10px',\n        height: '300px',\n        overflowY: 'scroll',\n        marginBottom: '10px'\n      },\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '5px 0',\n          color: message.sender === 'user' ? 'blue' : 'green' // 사용자와 로봇의 메시지 색상 다르게\n        },\n        children: message.sender === 'user' ? `사용자: ${message.text}` : `로봇: ${message.text}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput // 입력 필드의 값은 userInput 상태에 바인딩\n      ,\n      onChange: e => setUserInput(e.target.value) // 입력 변화에 따라 상태 업데이트\n      ,\n      placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\" // 입력 필드의 플레이스홀더\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      children: \"\\uC804\\uC1A1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatBot, \"K0oX757VKCMKA8zy3I1tPoQS6gk=\");\n_c = ChatBot;\nexport default ChatBot; // 컴포넌트를 내보냄\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatBot","_s","userInput","setUserInput","messages","setMessages","handleSendMessage","text","sender","response","fetch","method","headers","body","JSON","stringify","message","data","json","prevMessages","style","margin","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","border","padding","height","overflowY","marginBottom","map","index","color","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/ichan-yeong/my-chatbot/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction ChatBot() {\n    // 사용자 입력을 저장할 상태 변수\n    const [userInput, setUserInput] = useState('');\n    \n    // 메시지 리스트를 저장할 상태 변수\n    const [messages, setMessages] = useState([]);\n\n    // 메시지를 전송하는 함수\n    const handleSendMessage = async () => {\n        // 사용자 메시지를 메시지 리스트에 추가\n        setMessages([...messages, { text: userInput, sender: 'user' }]);\n        \n        // 서버에 사용자 메시지를 전송\n        const response = await fetch('/send_message', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ message: userInput }) // JSON 형태로 사용자 입력을 전송\n        });\n        \n        // 서버로부터 응답받기\n        const data = await response.json();\n        \n        // 로봇의 응답 메시지를 메시지 리스트에 추가\n        setMessages(prevMessages => [...prevMessages, { text: data.response, sender: 'assistant' }]);\n        \n        // 입력창 초기화\n        setUserInput('');\n    };\n\n    return (\n        <div style={{ margin: '20px', fontFamily: 'Arial, sans-serif' }}>\n            <h1>엄마형 로봇과의 채팅</h1>\n            <div style={{ \n                border: '1px solid #ccc', \n                padding: '10px', \n                height: '300px', \n                overflowY: 'scroll', \n                marginBottom: '10px' \n            }}>\n                {/* 메시지 리스트를 맵핑하여 화면에 표시 */}\n                {messages.map((message, index) => (\n                    <div \n                        key={index} \n                        style={{ \n                            margin: '5px 0', \n                            color: message.sender === 'user' ? 'blue' : 'green' // 사용자와 로봇의 메시지 색상 다르게\n                        }}>\n                        {message.sender === 'user' \n                            ? `사용자: ${message.text}` \n                            : `로봇: ${message.text}`}\n                    </div>\n                ))}\n            </div>\n            <input\n                type=\"text\"\n                value={userInput} // 입력 필드의 값은 userInput 상태에 바인딩\n                onChange={(e) => setUserInput(e.target.value)} // 입력 변화에 따라 상태 업데이트\n                placeholder=\"메시지를 입력하세요...\" // 입력 필드의 플레이스홀더\n            />\n            <button onClick={handleSendMessage}>전송</button> {/* 버튼 클릭 시 메시지 전송 */}\n        </div>\n    );\n}\n\nexport default ChatBot; // 컴포넌트를 내보냄\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}